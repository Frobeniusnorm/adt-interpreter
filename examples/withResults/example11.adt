adt Boolean
sorts Boolean
ops
    true:                      -> Boolean

    false:                     -> Boolean
end

adt Nat
sorts Nat,Boolean
ops
    Zero:               -> Nat
    succ:   Nat         -> Nat
    add:    Nat x Nat   -> Nat
    sub:    Nat x Nat   -> Nat
    mul:    Nat x Nat   -> Nat
    div:    Nat x Nat   -> Nat
    >:      Nat x Nat   -> Boolean
    <:      Nat x Nat   -> Boolean
axs
    add(Zero, x) = x
    add(succ(x), y) = succ(add(x, y))
    sub(x, Zero) = x
    sub(Zero, x) = Zero
    sub(succ(x), succ(y)) = sub(x,y)
    mul(x, Zero) = Zero
    mul(x, succ(y)) = add(x, mul(x,y))
    div(x, y) = | Zero                              if sub(y,x) != Zero
                | add(succ(Zero), div(sub(x,y), y)) else
    >(Zero, x) = false
    >(succ(x), Zero) = true 
    >(succ(x), succ(y)) = >(x,y)
    <(Zero, succ(x)) = true  
    <(x, Zero) = false
    <(succ(x), succ(y)) = <(x, y)
end

adt List
sorts List, T, Boolean, Nat
ops
    Nil: -> List
    Cons: T x List -> List
    concat: List x List -> List
    size: List -> Nat
    head: List -> T
    tail: List -> List
    subList: List x Nat x Nat -> List

    allSmaller: List x T -> List
    allGreaterEq: List x T ->List
    quickSort: List    -> List
    <: T x T -> Boolean
    >: T x T -> Boolean

    merge: List x List -> List
    mergeSort: List    -> List
axs
    concat(Nil, x) = x
    concat(Cons(x, a), b) = Cons(x, concat(a,b))
    head(Cons(x, l)) = x
    tail(Cons(x, l)) = l
    size(Nil) = Zero
    size(Cons(e, l)) = succ(size(l))
    
    //we again go over each element of the list by looking at each head and continuing with the tail
    //if we recursively call the method for the tail we decrease the indices of the sub-list (since the list changes, the indices change too)
    //so if a = zero and b is not, we take the elements in the result list 
    //if both are zero nothing happens - we iterated at the end of the sub list
    //if both are not zero, we are before the sub list and have to continue
    subList(Nil, a, b) = Nil
    subList(l, Zero, Zero) = Nil
    subList(Cons(e, l), Zero, succ(b)) = Cons(e, subList(l, Zero, b))
    subList(Cons(e, l), succ(a), succ(b)) = subList(l, a, b)

    merge(Nil, l) = l
    merge(l, Nil) = l
    //compare each head of the lists and take the smaller ones first
    merge(l1, l2) = | Cons(head(l1), merge(tail(l1), l2))  if <(head(l1), head(l2)) = true
                    | Cons(head(l2), merge(l1, tail(l2)))  else

    mergeSort(Nil) = Nil
    mergeSort(Cons(e, Nil)) = Cons(e, Nil)
    //divide the list at the middle, recursively sort each list and merge
    mergeSort(l) = merge(mergeSort(subList(l, 0, div(size(l), 2))), mergeSort(subList(l, div(size(l), 2), size(l))))
end

0 := Zero
1 := succ(0)
2 := succ(1)
3 := succ(2)
4 := succ(3)
5 := succ(4)
6 := succ(5)
7 := succ(6)
8 := succ(7)
9 := succ(8)

EXAMPLE_LIST := Cons(7, Cons(3, Cons(9, Cons(2, Cons(4, Cons(3, Cons(9, Cons(6, Cons(0, Nil)))))))))

mergeSort(EXAMPLE_LIST)