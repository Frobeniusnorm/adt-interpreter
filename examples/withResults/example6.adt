adt Nat
sorts Nat
ops
    Zero:               -> Nat
    succ:   Nat         -> Nat
    add:    Nat x Nat   -> Nat
    sub:    Nat x Nat   -> Nat
axs
    add(Zero, x) = x
    add(succ(x), y) = succ(add(x, y))
    sub(x, Zero) = x
    sub(Zero, x) = Zero
    sub(succ(x), succ(y)) = sub(x,y)
end

adt Boolean
sorts Boolean
ops
    true:                      -> Boolean

    false:                     -> Boolean
    not:   Boolean             -> Boolean

    and:   Boolean x Boolean   -> Boolean
    or:    Boolean x Boolean   -> Boolean
axs
    not(true) = false
    not(false) = true
    and(true, x) = x
    and(false,x) = false
    or(true, x) = true
    or(false, x) = x
end

adt List
sorts List, T, Boolean, Nat
ops
    Nil: -> List
    Cons: T x List -> List
    concat: List x List -> List
    head: List -> T
    tail: List -> List
    contains: List x T -> Boolean
    isSubList: List x List -> Boolean
    subList: List x Nat x Nat -> List
    without: List x T -> List
    append: List x T -> List
    prepend: T x List -> List
axs
    prepend(x, l) = Cons(x, l)
    concat(Nil, x) = x
    concat(Cons(x, a), b) = Cons(x, concat(a,b))
    head(Cons(x, l)) = x
    tail(Cons(x, l)) = l

    contains(a, x) = | false                if a = Nil
                     | true                  if head(a) = x
                     | contains(tail(a), x)  else
    isSubList(a, b) = | false if a = Nil
                      | true  if b = Nil
                      | isSubList(tail(a), tail(b)) if head(a) = head(b)
                      | isSubList(tail(a), b) else
    
end

contains(Cons(true, Cons(false, Cons(false, Cons(false, Nil)))), false)
contains(Cons(succ(Zero), Cons(succ(succ(Zero)), Cons(succ(Zero), Cons(succ(Zero), Nil)))), Zero)
contains(Cons(succ(Zero), Cons(succ(succ(Zero)), Cons(succ(Zero), Cons(succ(Zero), Cons(true, Nil))))), true)
contains(Cons(succ(Zero), Cons(succ(succ(Zero)), Cons(succ(Zero), Cons(succ(Zero), Cons(true, Nil))))), Nil)

isSubList(Cons(true, Cons(Zero, Cons(succ(Zero), Cons(false, Nil)))), Cons(Zero, Cons(succ(Zero), Nil)))
isSubList(Cons(true, Cons(Zero, Cons(succ(Zero), Cons(false, Nil)))), Cons(succ(Zero), Cons(succ(Zero), Nil)))